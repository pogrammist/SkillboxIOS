//Модуль 4
//
//1) Прочитайте главы Enumerations и Classes and Structures в книге «The Swift Programming Language»
//2) Если бы в твоей программе была работа с игральными картами, как бы ты организовал их хранение? Приведи пример.
//
//Я буду использовать Множества, так как это неупорядоченные коллекции уникальных значений.
//let cards: Set<String> = [“A♠”, ”2♠”, ”3♠”, ”4♠”, ”5♠”, ”6♠”, ”7♠”, ”8♠”, ”9♠”, ”10♠”, ”J♠”, ”Q♠”, ”К♠”, ”JOKER♠”, “A♥”, ”2♥”, ”3♥”, ”4♥”, ”5♥”, ”6♥”, ”7♥”, ”8♥”, ”9♥”, ”10♥”, ”J♥”, ”Q♥”, ”К♥”, ”JOKER♥”, ”A♣”, ”2♣”, ”3♣”, ”4♣”, ”5♣”, ”6♣”, ”7♣”, ”8♣”, ”9♣”, ”10♣”, ”J♣”, ”Q♣”, ”К♣”, ”JOKER♣”, ”A♦”, ”2♦”, ”3♦”, ”4♦”, ”5♦”, ”6♦”, ”7♦”, ”8♦”, ”9♦”, ”10♦”, ”J♦”, ”Q♦”, ”К♦”, ”JOKER♦”]
//
//3) Каких типов могут быть raw значения кейсов enum’а?
//raw значения - исходные значения могут быть строками, символами или любым целым числом или числом с плавающей точкой. Каждое исходное значение должно быть уникальным при его объявлении.
//
//4) Напишите класс и структуру для хранения информации (положение, размер) о круге, прямоугольнике
//struct CircleСoordinates {
//    var x = 100
//    var y = 100
//}
//
//class Circle {
//    var coordinates = CircleСoordinates()
//    var radius = 50
//}
//
//struct RectangleСoordinates {
//    var x = 200
//    var y = 100
//}
//
//class Rectangle {
//    var coordinates = RectangleСoordinates()
//    var width = 50
//    var height = 20
//}
//5) Для следующего кода, выполнение каких строчек закончится ошибкой и почему:
//class ClassUser1{
//    let name: String
//    init(name: String) {
//        self.name = name
//    }
//}
//
//class ClassUser2{
//    var name: String
//    init(name: String) {
//        self.name = name
//    }
//}
//
//struct StructUser1{
//    let name: String
//    init(name: String) {
//        self.name = name
//    }
//}
//
//struct StructUser2{
//    var name: String
//    init(name: String) {
//        self.name = name
//    }
//}
//
//let user1 = ClassUser1(name: "Nikita")
//1. user1.name = "Anton"
//    Вызовет ошибку: Невозможно присвоить свойству: 'name' является константой 'let'
//
//let user2 = ClassUser2(name: "Nikita")
//2. user2.name = "Anton"
//
//let user3 = StructUser1(name: "Nikita")
//3. user3.name = "Anton"
//    Вызовет ошибку: Невозможно присвоить свойству: 'name' является константой 'let'
//
//let user4 = StructUser2(name: "Nikita")
//4. user4.name = "Anton"
//    Вызовет ошибку: Невозможно присвоить свойству: 'user4' является константой 'let'
//
//var user5 = ClassUser1(name: "Nikita")
//5. user5.name = "Anton"
//    Вызовет ошибку: Невозможно присвоить свойству: 'name' является константой 'let'
//
//var user6 = ClassUser2(name: "Nikita")
//6. user6.name = "Anton"
//
//var user7 = StructUser1(name: "Nikita")
//7. user7.name = "Anton"
//    Вызовет ошибку: Невозможно присвоить свойству: 'name' является константой 'let'
//
//var user8 = StructUser2(name: "Nikita")
//8. user8.name = "Anton"
//
//6) Напишите пример класса автомобиля (какие поля ему нужны – на ваше усмотрение) с конструктором, в котором часть полей будет иметь значение по умолчанию
//class Car {
//    var model: String
//    var color: UIColor? = colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
//    init(model: String, color: UIColor?) {
//        self.model = model
//        self.color = color
//    }
//}
//
//var car = Car(model: "mersedes", color:  colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0))
//
//7) Напишите класс для калькулятора с функциями для сложения, вычитания, умножения и деления цифр, которые в нем хранятся как свойства
//
//8) В каких случаях следует использовать ключевое слово static?
//    Когда необходимо объявить свойство или метод относящийся к классу, а не его экземпляру
//
//9) Могут ли иметь наследников:
//1.Классы
//2.Структуры
//3.Enum’ы
//10) Представим, что вы создаете rpg игру. Напишите структуру для хранения координаты игрока, enum для направлений (восток, сервер, запад, юг) и функцию, которая берет к себе на вход позицию и направление и возвращает новую координату (после того как игрок походил на одну клетку в соответствующую сторону). Вызовите эту функцию несколько раз, «походив» своим игроком
//
//
//
//
//Бонусные задания к урокам:
//Енамы
//Можно ли в enum’е хранить дополнительные данные?
//
//Классы
//В каких случаях удобнее структурировать данные и функции в класс?
//
//Структуры
//В каких случаях лучше использовать класс, а в каких – структуру?
